// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// SQL Models (PostgreSQL)
model SqlUser {
  id                Int                  @id @default(autoincrement())
  username          String
  email             String               @unique
  password          String
  verified          Boolean              @default(false)
  verificationToken String?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  updateRequests    SqlUpdateRequest[]
  deletionRequests  SqlDeletionRequest[]

  @@map("sql_users")
}

model SqlUpdateRequest {
  id          Int      @id @default(autoincrement())
  userId      Int
  newUsername String
  newEmail    String
  token       String   @unique
  createdAt   DateTime @default(now())
  user        SqlUser  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sql_update_requests")
}

model SqlDeletionRequest {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  createdAt DateTime @default(now())
  user      SqlUser  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sql_deletion_requests")
}

// NoSQL Models (Using UUID instead of auto() for PostgreSQL)
model NosqlUser {
  id                String                 @id @default(uuid()) @map("_id")
  username          String
  email             String                 @unique
  password          String
  verified          Boolean                @default(false)
  verificationToken String?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  updateRequests    NosqlUpdateRequest[]
  deletionRequests  NosqlDeletionRequest[]

  @@map("nosql_users")
}

model NosqlUpdateRequest {
  id          String    @id @default(uuid()) @map("_id")
  userId      String
  newUsername String
  newEmail    String
  token       String    @unique
  createdAt   DateTime  @default(now())
  user        NosqlUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("nosql_update_requests")
}

model NosqlDeletionRequest {
  id        String    @id @default(uuid()) @map("_id")
  userId    String
  token     String    @unique
  createdAt DateTime  @default(now())
  user      NosqlUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("nosql_deletion_requests")
}
